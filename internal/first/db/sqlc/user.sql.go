// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO first.user (
  user_name,
  user_email,
  user_password,
  user_role,
  is_active
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, user_name, user_email, user_password, user_role, is_active, created_at, updated_at
`

type CreateUserParams struct {
	UserName     string
	UserEmail    string
	UserPassword string
	UserRole     FirstUserRole
	IsActive     bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (FirstUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserName,
		arg.UserEmail,
		arg.UserPassword,
		arg.UserRole,
		arg.IsActive,
	)
	var i FirstUser
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserRole,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE first.user
SET is_active = false
WHERE id = $1
RETURNING id, user_name, user_email, user_password, user_role, is_active, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, user_name, user_email, user_password, user_role, is_active, created_at, updated_at FROM first.user
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (FirstUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i FirstUser
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserRole,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, user_name, user_email, user_password, user_role, is_active, created_at, updated_at FROM first.user
WHERE user_name = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserByName(ctx context.Context, userName string) (FirstUser, error) {
	row := q.db.QueryRow(ctx, getUserByName, userName)
	var i FirstUser
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserRole,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, user_name, user_email, user_password, user_role, is_active, created_at, updated_at FROM first.user
WHERE is_active = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUsersParams struct {
	IsActive bool
	Limit    int32
	Offset   int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]FirstUser, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.IsActive, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FirstUser
	for rows.Next() {
		var i FirstUser
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.UserEmail,
			&i.UserPassword,
			&i.UserRole,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE first.user
SET user_password = $2
WHERE id = $1
RETURNING id, user_name, user_email, user_password, user_role, is_active, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	ID           int32
	UserPassword string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (FirstUser, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.UserPassword)
	var i FirstUser
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserRole,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE first.user
SET user_role = $2
WHERE id = $1
RETURNING id, user_name, user_email, user_password, user_role, is_active, created_at, updated_at
`

type UpdateUserRoleParams struct {
	ID       int32
	UserRole FirstUserRole
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (FirstUser, error) {
	row := q.db.QueryRow(ctx, updateUserRole, arg.ID, arg.UserRole)
	var i FirstUser
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserRole,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
