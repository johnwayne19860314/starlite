// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: entry_category.sql

package db

import (
	"context"
)

const createEntryCategory = `-- name: CreateEntryCategory :one
INSERT INTO first.entry_category (
  category,
  note,
  is_active
) VALUES (
  $1, $2, $3
) RETURNING id, category, note, is_active, created_at, updated_at
`

type CreateEntryCategoryParams struct {
	Category string
	Note     string
	IsActive bool
}

func (q *Queries) CreateEntryCategory(ctx context.Context, arg CreateEntryCategoryParams) (FirstEntryCategory, error) {
	row := q.db.QueryRow(ctx, createEntryCategory, arg.Category, arg.Note, arg.IsActive)
	var i FirstEntryCategory
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Note,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEntryCategory = `-- name: DeleteEntryCategory :exec
UPDATE first.entry_category
SET is_active = false
WHERE category = $1
RETURNING id, category, note, is_active, created_at, updated_at
`

func (q *Queries) DeleteEntryCategory(ctx context.Context, category string) error {
	_, err := q.db.Exec(ctx, deleteEntryCategory, category)
	return err
}

const getEntryCategory = `-- name: GetEntryCategory :one
SELECT id, category, note, is_active, created_at, updated_at FROM first.entry_category
WHERE category = $1 LIMIT 1
`

func (q *Queries) GetEntryCategory(ctx context.Context, category string) (FirstEntryCategory, error) {
	row := q.db.QueryRow(ctx, getEntryCategory, category)
	var i FirstEntryCategory
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Note,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEntryCategories = `-- name: ListEntryCategories :many
SELECT id, category, note, is_active, created_at, updated_at FROM first.entry_category
WHERE is_active = $1
ORDER BY id
`

func (q *Queries) ListEntryCategories(ctx context.Context, isActive bool) ([]FirstEntryCategory, error) {
	rows, err := q.db.Query(ctx, listEntryCategories, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FirstEntryCategory
	for rows.Next() {
		var i FirstEntryCategory
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.Note,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntryCategory = `-- name: UpdateEntryCategory :exec
UPDATE first.entry_category
SET note = $1
WHERE category = $2
RETURNING id, category, note, is_active, created_at, updated_at
`

type UpdateEntryCategoryParams struct {
	Note     string
	Category string
}

func (q *Queries) UpdateEntryCategory(ctx context.Context, arg UpdateEntryCategoryParams) error {
	_, err := q.db.Exec(ctx, updateEntryCategory, arg.Note, arg.Category)
	return err
}
